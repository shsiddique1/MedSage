<?xml version="1.0" encoding="utf-8" ?>
<project name="WCC" default="war" basedir=".">
	
  <property  file="build.property"/>
  <property name="JAVA_HOME" location="${java.home}" />
  <property name="build.classes" location="build/classes" />
  <property name="deployment.classes" location="WebContent/WEB-INF/classes" />
  
  <property  file="version.property"/>
  
  <path id="project.class.path">
    <pathelement location="build/classes"/>
    <!-- Add any additional non-server libs (such as JUnit) -->
    <fileset dir="WebContent/WEB-INF/lib" includes="**/*.jar"/>
  </path>
	
  <target name="build" depends="clean" description="Compile java source">
    <mkdir dir="${build.classes}"/>
  	<mkdir dir="${deployment.classes}"/>
  	<mkdir dir="WebContent/medsage_csvs"/>
	<javac srcdir="src" destdir="${build.classes}" debug="yes" >
		<classpath refid="project.class.path"/>
	</javac>
    <copy todir="${deployment.classes}">
      <fileset dir="${build.classes}" excludes="**/*.java"/>
    </copy>
    <copy todir="${deployment.classes}">
      <fileset dir="config" excludes="**/config*.properties"/>
    </copy>
    <copy todir="WebContent/medsage_csvs">
      <fileset dir="medsage_csvs" />
    </copy>
  </target>
 
<target name="war" depends="clean,build">
	<war destfile="deployment/WCC.war" webxml="WebContent/WEB-INF/web.xml">
	<fileset dir="WebContent">
	    <!-- Since this application is expected to be deployed on a Tomcat Server, this library
	    should be available in all environments, and include it there will just cause jar conflict.
	    So we have it for dev, but we exclude it for all the deploys. -->
	     <exclude name="**/servlet-api.jar"/>
	 </fileset>
	 <manifest>
		      <attribute name="Built-By" value="SSD"/>
		      <!-- Information about the program itself -->
		      <attribute name="Implementation-Title" value="WCC.war"/>
		      <attribute name="Implementation-Version" value="${wcc.version.implementation}"/>
	     </manifest>
	</war>
</target>
	
  <target name="clean" description="Cleans this project">
    <delete dir="${build.classes}" failonerror="false" />
    <delete dir="${deployment.classes}" failonerror="false" />
  	<delete dir="deployment" failonerror="false" />
  </target>
	
	<target name="deploy" depends="war">
		<delete file="${tomcat.webapp.path}/WCC.war"></delete>
		<copy todir="${tomcat.webapp.path}" file="deployment/WCC.war" />
	</target>
</project>